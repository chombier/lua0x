* Introduction

  *Lua0x* is a very simple c++11 library for registering c++ lambdas
  under a lua module. It provides a very fast and flexible way of
  building lua modules from c++ (see some examples below). The library
  is very lightweight thus easily copy-pastable where needed.
  
  It works on top of luabind by wrapping lambdas under std::function
  objects, and registering the various std::function types to luabind
  when needed. 

  Any function parameter/return type will work, as long as it is
  registered with luabind before the function call happens (basic
  types and std::string are automatically registered by luabind).
  
* Requirements
  
  The code dependencies are lua 5.1 and luabind. A decent c++11
  compiler is also needed (/i.e./ auto, lambdas and template aliases).

  The build "system" uses QMake and pkg-config. The following command
  should take care of everything under Debian/Ubuntu:

: $ sudo apt-get install lua5.1 libluabind-dev qt4-qmake pkg-config
  
  Have a look at ~lua0x.pro~ and modify the ~TEMPLATE=~ line in order
  to build as a library or as an example executable.
  
** Building

   Easy-peasy:

: $ qmake
: $ make

This will build =lib/liblua0x.so=.

* Examples

Build the examples using:

: $ cd examples
: $ qmake
: $ make

** From c++

Here we start the lua interpreter and declare a lua module from a c++
program. The file ~examples/main/main.cpp~ is shown below:

#+BEGIN_EXAMPLE
#include <lua0x/module.h>
#include <lua0x/state.h>

int main(int, char** ) {

  // lua state wrapper
  lua0x::state state;

  // init stuff and declare the global lua module 'cxx'
  lua0x::module::init( state, "cxx" );
  
  // declare a lua module. it will appear under the lua global name
  // 'test' once loaded.
  lua0x::module test("test");
  
  // bind a lambda as test.echo
  test("echo", [](const std::string& name) { 
      std::cout << name << std::endl; 
    });
  
  // capturing lambdas
  int foo = 0;

  test
    ("get", [&] { return foo; } )
    ("set", [&](int x) { foo = x; } )
    ;
  
  // load the test module in lua
  state.string("cxx.load('test')");
  
  // say hi from lua
  state.string("test.echo('hi thar !')");
  
  // modify foo from lua
  state.string("test.set( 42 )");
  
  // we need to open_libs before using tostring
  state.libs();

  // print foo value from lua
  state.string("test.echo( 'foo: ' .. test.get() )" );
  
  return 0;
}
#+END_EXAMPLE

This example will create =bin/main=.

** From lua

Here we create the same extension as above, but built as a library and
loaded from the (non-embedded) lua interpreter. See the file
~examples/main/test.cpp~ for more details.

Building this example will create =lib/libtest.so=. Then, run
~examples/test/test.lua~ for a use example:

#+BEGIN_EXAMPLE
-- adjust package.path
package.path = '../../?.lua;' .. package.path

-- load lua0x
require 'lua0x'

-- load module 'test' from libtest.so
lua0x.loadlib('libtest.so', 'test')

-- use module test
test.echo('hi there !')
test.set( 42 )
test.echo('foo: '.. test.get() )
#+END_EXAMPLE

* License

  LGPL 2.1

  
