* Introduction

  *Lua0x* is a very simple c++11 library for registering c++ lambdas
  under a lua module (see the example below). It is intended to be
  lightweight, and thus easily copy-pasta'd where needed.

  It works by wrapping lambdas under std::function objects, and
  registering the std::function types to luabind when needed. Any
  function parameter/return type will work, as long as it is
  registered with luabind before the function call (basic types and
  std::string are already registered).
  
* Requirements
  
  The code dependencies are lua 5.1 and luabind. A decent c++11
  compiler is also needed (/i.e./ auto, lambdas and template aliases).

  The build "system" uses QMake and pkg-config. The following command
  should take care of everything under Debian/Ubuntu:

: sudo apt-get install lua5.1 libluabind-dev qt4-qmake pkg-config
  
  Have a look at ~lua0x.pro~ and modify the ~TEMPLATE=~ line in order
  to build as a library or as an example executable.
  
  Then:

: qmake
: make

* Example

Taken from ~main.cpp~:

#+BEGIN_SRC CPP

#include <lua0x/module.h>
#include <lua0x/state.h>

int main(int, char** ) {

  // lua state wrapper
  lua0x::state state;

  // init stuff and declare a global lua module 'cxx'
  lua0x::module::init( state, "cxx" );
  
  // declare a lua module: it will go under global name 'test' once
  // loaded.
  lua0x::module test("test");
  
  // binds a c++11 lambda as test.echo
  test("echo", [](const std::string& name) { 
      std::cout << name << std::endl; 
    });
  
  // loads the test module in lua
  state.string("cxx.load('test')");
  
  // calls test.echo
  state.string("test.echo('lolwat')");
  
  return 0;
}
#+END_SRC


* License

  LGPL 2.1

  
